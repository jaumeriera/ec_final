00001124 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 24/11/2018 19:04:02

00000000                             1  ; =============================================================================
00000000                             2  ; TITLE    : EXAMPLE GAME
00000000                             3  ; AUTHOR   :
00000000                             4  ; CREATION :
00000000                             5  ; =============================================================================
00000000                             6  
00001000                             7              ORG     $1000
00001000                             8  
00001000                             9  ; --- CODE INCLUDES -----------------------------------------------------------
00001000                            10  
00001000                            11              INCLUDE "SYSCONST.X68"          ; SYSTEM CONSTANTS
00001000                            12  ; =============================================================================
00001000                            13  ; SYSTEM CONSTANTS
00001000                            14  ; =============================================================================
00001000                            15  
00001000                            16  ; --- TRAP RELATED CONSTANTS --------------------------------------------------
00001000                            17  
00001000  =00000000                 18  KBDTRAP     EQU     0                       ; KEYBOARD UPDATE TRAP
00001000  =00000001                 19  SCRTRAP     EQU     1                       ; SCREEN REFRESH TRAP
00001000                            20  
00001000                            21  ; --- KEY CODES (EASy68K)
00001000                            22  
00001000  =00000020                 23  KBDCHRSP    EQU     $20                     ; SPACE KEY
00001000  =0000004D                 24  KBDCHRMK    EQU     'M'                     ; M KEY
00001000  =00000010                 25  KBDCHRSH    EQU     $10                     ; SHIFT KEY
00001000  =00000050                 26  KBDCHRPK    EQU     'P'                     ; P KEY
00001000  =00000025                 27  KBDCHRLF    EQU     $25                     ; LEFT KEY
00001000  =00000026                 28  KBDCHRUP    EQU     $26                     ; UP KEY
00001000  =00000027                 29  KBDCHRRT    EQU     $27                     ; RIGHT KEY
00001000  =00000028                 30  KBDCHRDN    EQU     $28                     ; DOWN KEY
00001000                            31  
00001000                            32  ; --- KEYBOARD MAPPING --------------------------------------------------------
00001000                            33  
00001000  =00000025                 34  KBDLEFT     EQU     KBDCHRLF                ; LEFT BUTTON
00001000  =00000026                 35  KBDUP       EQU     KBDCHRUP                ; UP BUTTON
00001000  =00000027                 36  KBDRIGHT    EQU     KBDCHRRT                ; RIGHT BUTTON
00001000  =00000028                 37  KBDDOWN     EQU     KBDCHRDN                ; DOWN BUTTON
00001000  =00000020                 38  KBDFIRE1    EQU     KBDCHRSP                ; FIRE 1 BUTTON
00001000  =0000004D                 39  KBDFIRE2    EQU     KBDCHRMK                ; FIRE 2 BUTTON
00001000  =00000010                 40  KBDFIRE3    EQU     KBDCHRSH                ; FIRE 3 BUTTON
00001000  =00000050                 41  KBDPAUSE    EQU     KBDCHRPK                ; PAUSE BUTTON
00001000                            42  
00001000                            43  ; --- KEYBOARD BITFIELD MASKS -------------------------------------------------
00001000                            44  ; CONVENIENCE CONSTANTS TO ACCESS THE FOLLOWING BIT-FIELD.
00001000                            45  ; THIS BIT-FIELD IS USED BY SYSTEM VARS (KBDVAL) AND (KBDEDGE).
00001000                            46  ; +---+---+---+---+---+---+---+---+
00001000                            47  ; | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
00001000                            48  ; +---+---+---+---+---+---+---+---+
00001000                            49  ;   |   |   |   |   |   |   |   |
00001000                            50  ;   |   |   |   |   |   |   |   +---------- LEFT BUTTON
00001000                            51  ;   |   |   |   |   |   |   +-------------- UP BUTTON
00001000                            52  ;   |   |   |   |   |   +------------------ RIGHT BUTTON
00001000                            53  ;   |   |   |   |   +---------------------- DOWN BUTTON
00001000                            54  ;   |   |   |   +-------------------------- FIRE 1 BUTTON
00001000                            55  ;   |   |   +------------------------------ FIRE 2 BUTTON
00001000                            56  ;   |   +---------------------------------- FIRE 3 BUTTON
00001000                            57  ;   +-------------------------------------- PAUSE BUTTON
00001000                            58  
00001000  =00000001                 59  KBDMSKLF    EQU     %00000001
00001000  =00000002                 60  KBDMSKUP    EQU     %00000010
00001000  =00000004                 61  KBDMSKRT    EQU     %00000100
00001000  =00000008                 62  KBDMSKDN    EQU     %00001000
00001000  =00000010                 63  KBDMSKF1    EQU     %00010000
00001000  =00000020                 64  KBDMSKF2    EQU     %00100000
00001000  =00000040                 65  KBDMSKF3    EQU     %01000000
00001000  =00000080                 66  KBDMSKPS    EQU     %10000000
00001000                            67  
00001000                            68  ; --- KEYBOARD BITFIELD POSITIONS ---------------------------------------------
00001000                            69  
00001000  =00000000                 70  KBDBITLF    EQU     0
00001000  =00000001                 71  KBDBITUP    EQU     1
00001000  =00000002                 72  KBDBITRT    EQU     2
00001000  =00000003                 73  KBDBITDN    EQU     3
00001000  =00000004                 74  KBDBITF1    EQU     4
00001000  =00000005                 75  KBDBITF2    EQU     5
00001000  =00000006                 76  KBDBITF3    EQU     6
00001000  =00000007                 77  KBDBITPS    EQU     7
00001000                            78  
00001000                            79  ; --- SCREEN RELATED CONSTANTS ------------------------------------------------
00001000                            80  
00001000  =00000280                 81  SCRWIDTH    EQU     640                     ; SCREEN WIDTH (PIXELS)
00001000  =000001E0                 82  SCRHEIGH    EQU     480                     ; SCREEN HEIGHT (PIXELS)
00001000  =00000001                 83  SCRIRQ      EQU     1                       ; SCREEN INTERRUPT NUMBER
00001000  =00000014                 84  SCRTIM      EQU     20                      ; SCREEN TIMER (MS)
00001000                            85  
00001000                            86  ; --- DYNAMIC MEMORY CONSTANTS ------------------------------------------------
00001000                            87  
00001000  =00000040                 88  DMMBSIZE    EQU     64                      ; BLOCK SIZE (BYTES). POWER OF TWO
00001000  =00000032                 89  DMMBNUM     EQU     50                      ; NUMBER OF BLOCKS
00001000  =00000000                 90  DMMSYSID    EQU     0                       ; SYSTEM OWNER ID (MUST BE 0)
00001000  =00000000                 91  -------------------- end include --------------------
00001000                            92              INCLUDE "SYSTEM.X68"            ; SYSTEM CODE
00001000                            93  ; =============================================================================
00001000                            94  ; SYSTEM MANAGEMENT (SYSTEM CODE)
00001000                            95  ; =============================================================================
00001000                            96  
00001000                            97  ;PARA SABER CUAL HA CAMBIADO KDRREAD KBDVAL NOT DE UNO AND CON EL OTRO
00001000                            98  
00001000                            99  ; -----------------------------------------------------------------------------
00001000                           100  SYSINIT
00001000                           101  ; INITIALIZES THE SYSTEM
00001000                           102  ; INPUT    - NONE
00001000                           103  ; OUTPUT   - NONE
00001000                           104  ; MODIFIES - NONE
00001000                           105  ; -----------------------------------------------------------------------------
00001000  205F                     106              MOVE.L  (A7)+,A0                ; GET RETURN ADDRESS
00001002  4EB9 0000104A            107              JSR     KBDINIT                 ; INIT KEYBOARD
00001008  4EB9 0000101C            108              JSR     SCRINIT                 ; INIT SCREEN
0000100E  4EB9 00001062            109              JSR     DMMINIT                 ; INIT DYNAMIC MEMORY
00001014  027C DFFF                110              ANDI.W  #$DFFF,SR               ; SWITCH TO USER
00001018  2F08                     111              MOVE.L  A0,-(A7)                ; PUT RETURN ADDRESS
0000101A  4E75                     112              RTS
0000101C                           113  
0000101C                           114  ; =============================================================================
0000101C                           115  ; SCREEN MANAGEMENT (SYSTEM CODE)
0000101C                           116  ; =============================================================================
0000101C                           117  
0000101C                           118  ; -----------------------------------------------------------------------------
0000101C                           119  SCRINIT
0000101C                           120  ; INITIALIZES THE SCREEN, SCREEN-RELATED INTERRUPT AND VARS.
0000101C                           121  ; INPUT    - NONE
0000101C                           122  ; OUTPUT   - NONE
0000101C                           123  ; MODIFIES - D0,D1,D2,D3
0000101C                           124  ; -----------------------------------------------------------------------------
Line 125 ERROR: Comma expected
0000101C                           125              MOVE.L D0-D1,-(A7)
0000101C                           126              ; - DISABLE INTS (SET INT BITS IN SR TO 111)
Line 127 ERROR: Invalid opcode
0000101C                           127              INT_SET_LEVEL 7
0000101C                           128              ; - INSTALL SCRUPD INTO TRAP SCRTRAP
0000101C  21FC 00001048 0084       129              MOVE.L  #SCRUPD,($80+SCRTRAP*4)
00001024                           130              ; - SET RESOLUTION TO SCRWIDTH X SCRHEIGHT
Line 131 ERROR: Invalid opcode
00001024                           131              SC_SET_RES SCRWIDTH SCRHEIGH
00001024                           132              ; - SET WINDOWED MODE
Line 133 ERROR: Invalid opcode
00001024                           133              SC_SET_WINDOWED
00001024                           134              ; - CLEAR VISIBLE BUFFER
Line 135 ERROR: Invalid opcode
00001024                           135              SC_CLEAR
00001024                           136              ; - ENABLE DOUBLE BUFFER
Line 137 ERROR: Invalid opcode
00001024                           137              SC_ENABLE_DB
00001024                           138              ; - CLEAR HIDDEN BUFFER
Line 139 ERROR: Invalid opcode
00001024                           139              SC_SWAP_DB
Line 140 ERROR: Invalid opcode
00001024                           140              SC_CLEAR
00001024                           141              ; - INSTALL SCRISR FOR IRQ SCRIRQ (IRQ INTERRUPT VECTOR BEGINS
00001024                           142              ;   AT $60. INSTALLATION IS SIMILAR TO TRAP INSTALLATION)
00001024  21FC 0000103A 0064       143              MOVE.L  #SCRISR,($60+SCRIRQ*4)
0000102C                           144              ; - CLEAR SCRINTCT AND SCRCYCCT
0000102C  4239 00001142            145              CLR.B   (SCRINTCT)
00001032  4239 00001143            146              CLR.B   (SCRCYCCT)
00001038                           147              ; - ENABLE INTS (SET INT BITS IN SR TO 000)
Line 148 ERROR: Invalid opcode
00001038                           148              INT_SET_LEVEL 0
Line 149 ERROR: Comma expected
00001038                           149              MOVE.L D0-D7, (A7)+
00001038  4E75                     150              RTS
0000103A                           151  
0000103A                           152  ; -----------------------------------------------------------------------------
0000103A                           153  SCRISR
0000103A                           154  ; SCREEN TIMER ISR. INCREASES THE INTERRUPT COUNTER AND UPDATES DOUBLE BUFFER.
0000103A                           155  ; INPUT    - NONE
0000103A                           156  ; OUTPUT   - NONE
0000103A                           157  ; MODIFIES - NONE
0000103A                           158  ; -----------------------------------------------------------------------------
0000103A  5239 00001142            159              ADDQ.B  #1,(SCRINTCT)           ; UPDATE INT FLAG/COUNTER
00001040  5239 00001143            160              ADDQ.B  #1,(SCRCYCCT)           ; UPDATE CYCLE COUNTER
00001046  4E73                     161              RTE
00001048                           162  
00001048                           163  ; -----------------------------------------------------------------------------
00001048                           164  SCRUPD
00001048                           165  ; TRAP SERVICE ROUTINE IN CHARGE OF VISUALIZING CURRENT FRAME AND CLEARING
00001048                           166  ; BUFFER FOR THE NEXT ONE.
00001048                           167  ; INPUT    - NONE
00001048                           168  ; OUTPUT   - NONE
00001048                           169  ; MODIFIES - NONE
00001048                           170  ; -----------------------------------------------------------------------------
00001048                           171              ; UPDATE DOUBLE BUFFER AND CLEAR HIDDEN BUFFER
Line 172 ERROR: Invalid opcode
00001048                           172              SC_SWAP_DB
Line 173 ERROR: Invalid opcode
00001048                           173              SC_CLEAR
00001048  4E73                     174              RTE
0000104A                           175  
0000104A                           176  ; =============================================================================
0000104A                           177  ; KEYBOARD MANAGEMENT (SYSTEM CODE)
0000104A                           178  ; =============================================================================
0000104A                           179  
0000104A                           180  ; -----------------------------------------------------------------------------
0000104A                           181  KBDINIT
0000104A                           182  ; INITIALIZES THE SYSTEM VARIABLES KBDSYS AND KBDVAL
0000104A                           183  ; INPUT    - NONE
0000104A                           184  ; OUTPUT   - NONE
0000104A                           185  ; MODIFIES - NONE
0000104A                           186  ; -----------------------------------------------------------------------------
0000104A  4239 00001140            187              CLR.B   (KBDVAL)                ; INIT VARS
00001050  4239 00001141            188              CLR.B   (KBDEDGE)
00001056  21FC 00001060 0080       189              MOVE.L  #KBDREAD,($80+KBDTRAP*4) ; INSTALL
0000105E  4E75                     190              RTS
00001060                           191  
00001060                           192  ; -----------------------------------------------------------------------------
00001060                           193  KBDREAD
00001060                           194  ; TRAP SERVICE ROUTINE.
00001060                           195  ; UPDATES THE SYSTEM VARIABLES KBDEDGE AND KBDVAL ACCORDING TO THE BITFIELD
00001060                           196  ; DESCRIBED IN SYSCONST. KBDVAL HOLDS THE CURRENT VALUES AND KBDEFGE HOLDS
00001060                           197  ; RISING EDGES FROM PREVIOUS CALL TO THE CURRENT ONE.
00001060                           198  ; INPUT    - NONE
00001060                           199  ; OUTPUT   - (KBDVAL) AND (KBDEDGE)
00001060                           200  ; MODIFIES - NONE
00001060                           201  ; -----------------------------------------------------------------------------
Line 202 ERROR: Comma expected
00001060                           202              MOVE.L D0-D7, -(A7)
00001060                           203              
00001060                           204              ; LOAD MOVEMENT KEYS         
Line 205 ERROR: Invalid opcode
00001060                           205              KBD_LOAD_KEYS KBDLEFT KBDRIGHT KBDUP KBDDOWN
00001060                           206              ; UPDATE KBDVAL AND KBDEDGE DEPENDING ON KEY STATE
Line 207 ERROR: Invalid opcode
00001060                           207              KBD_UPDT_VARS 24 KBDMSKLF
Line 208 ERROR: Invalid opcode
00001060                           208              KBD_UPDT_VARS 16 KBDMSKRT
Line 209 ERROR: Invalid opcode
00001060                           209              KBD_UPDT_VARS 8 KBDMSKUP
Line 210 ERROR: Invalid opcode
00001060                           210              KBD_UPDT_VARS 0 KBDMSKDN
00001060                           211  
00001060                           212              ; LOAD OTHER KEYS
Line 213 ERROR: Invalid opcode
00001060                           213              KBD_LOAD_KEYS KBDFIRE1, KBDFIRE2, KBDFIRE3, KBDPAUSE
00001060                           214              ; UPDATE KBDVAL AND KBDEDGE DEPENDING ON KEY STATE
Line 215 ERROR: Invalid opcode
00001060                           215              KBD_UPDT_VARS 24 KBDFIRE1
Line 216 ERROR: Invalid opcode
00001060                           216              KBD_UPDT_VARS 16 KBDFIRE2
Line 217 ERROR: Invalid opcode
00001060                           217              KBD_UPDT_VARS 8 KBDFIRE3
Line 218 ERROR: Invalid opcode
00001060                           218              KBD_UPDT_VARS 0 KBDPAUSE
00001060                           219  
Line 220 ERROR: Invalid syntax
00001060                           220              MOVE.L (A7)+, D0-D7
00001060  4E73                     221              RTE
00001062                           222  
00001062                           223  ; =============================================================================
00001062                           224  ; DYNAMIC MEMORY MANAGEMENT (SYSTEM CODE)
00001062                           225  ; DYNAMIC MEMORY IS A SET OF DMMBNUM SLOTS OF DMMBSIZE BYTES EACH ONE.
00001062                           226  ; DMMBSIZE MUST BE POWER OF TWO. A SLOT HAS:
00001062                           227  ; - HEADER - 1 WORD. SPECIFIES THE OWNER (0 MEANS OWNED BY SYSTEM)
00001062                           228  ; - DATA   - DMMBSIZE - 2 BYTES. MAY CONTAIN VARS AND ANY KIND OF DATA RELATED
00001062                           229  ;            THE THE OWNER. IF OWNER==0, DATA IS MEANINGLESS.
00001062                           230  ; =============================================================================
00001062                           231  
00001062                           232  ; -----------------------------------------------------------------------------
00001062                           233  DMMINIT
00001062                           234  ; INITIALIZES THE DYNAMIC MEMORY TO ALL OWNED BY SYSTEM.
00001062                           235  ; INPUT    - NONE
00001062                           236  ; OUTPUT   - NONE
00001062                           237  ; MODIFIES - NONE
00001062                           238  ; -----------------------------------------------------------------------------
00001062  48E7 8080                239              MOVEM.L D0/A0,-(A7)
00001066  41F9 00001180            240              LEA     DMMDATA,A0
0000106C  303C 0031                241              MOVE.W  #DMMBNUM-1,D0
00001070  30BC 0000                242  .LOOP       MOVE.W  #DMMSYSID,(A0)
00001074  D1FC 00000040            243              ADD.L   #DMMBSIZE,A0
0000107A  51C8 FFF4                244              DBRA.W  D0,.LOOP
0000107E  4CDF 0101                245              MOVEM.L (A7)+,D0/A0
00001082  4E75                     246              RTS
00001084                           247  
00001084                           248  ; -----------------------------------------------------------------------------
00001084                           249  DMMFIRST
00001084                           250  ; SEARCHES THE FIRST MEMORY SLOT NOT OWNED BY SYSTEM AND OUTPUTS A POINTER
00001084                           251  ; TO THE CORRESPONDING DATA (SLOT ADDRESS+2)
00001084                           252  ; INPUT    - NONE
00001084                           253  ; OUTPUT   - A0   : POINTER TO THE DATA OR 0 IF NOT FOUND
00001084                           254  ; MODIFIES - NONE (ASIDE OF OUTPUT)
00001084                           255  ; -----------------------------------------------------------------------------
00001084  41F9 00001180            256              LEA     DMMDATA,A0
0000108A  4A58                     257  DMMFRLOP    TST.W   (A0)+
0000108C  6600 0016                258              BNE     DMMFRFND
00001090  D1FC 0000003E            259              ADD.L   #DMMBSIZE-2,A0
00001096  B1FC 00001DFF            260  DMMFRCOM    CMP.L   #DMMDATA+DMMBSIZE*DMMBNUM-1,A0
0000109C  6DEC                     261              BLT     DMMFRLOP
0000109E  207C 00000000            262              MOVE.L  #0,A0
000010A4  4E75                     263  DMMFRFND    RTS
000010A6                           264  
000010A6                           265  ; -----------------------------------------------------------------------------
000010A6                           266  DMMNEXT
000010A6                           267  ; SEARCHES THE NEXT MEMORY SLOT NOT OWNED BY SYSTEM AND OUTPUTS A POINTER
000010A6                           268  ; TO THE CORRESPONDING DATA (SLOT ADDRESS+2)
000010A6                           269  ; INPUT    - A0   : POINTER WITHIN THE CURRENT SLOT
000010A6                           270  ; OUTPUT   - A0   : POINTER TO THE DATA OR 0 IF NOT FOUND
000010A6                           271  ; MODIFIES - NONE (ASIDE OF OUTPUT)
000010A6                           272  ; -----------------------------------------------------------------------------
000010A6  2F00                     273              MOVE.L  D0,-(A7)
000010A8  2008                     274              MOVE.L  A0,D0
000010AA  C0BC FFFFFFC0            275              AND.L   #-DMMBSIZE,D0           ; TAKE ADVANTAGE OF ALIGNMENT
000010B0  0680 00000040            276              ADD.L   #DMMBSIZE,D0
000010B6  2040                     277              MOVE.L  D0,A0
000010B8  201F                     278              MOVE.L  (A7)+,D0
000010BA  60DA                     279              BRA     DMMFRCOM
000010BC                           280  
000010BC                           281  ; -----------------------------------------------------------------------------
000010BC                           282  DMMFRSTO
000010BC                           283  ; SEARCHES THE FIRST MEMORY SLOT WITH THE SPECIFIED ID AND OUTPUTS A POINTER
000010BC                           284  ; TO THE CORRESPONDING DATA (SLOT ADDRESS+2)
000010BC                           285  ; INPUT    - D0.W : ID TO SEARCH
000010BC                           286  ; OUTPUT   - A0   : POINTER TO THE DATA OR 0 IF NOT FOUND
000010BC                           287  ; MODIFIES - NONE (ASIDE OF OUTPUT)
000010BC                           288  ; -----------------------------------------------------------------------------
000010BC  41F9 00001180            289              LEA     DMMDATA,A0
000010C2  B058                     290  DMMFLOOP    CMP.W   (A0)+,D0
000010C4  6700 0016                291              BEQ     DMMFFND
000010C8  D1FC 0000003E            292              ADD.L   #DMMBSIZE-2,A0
000010CE  B1FC 00001DFF            293  DMMFCOM     CMP.L   #DMMDATA+DMMBSIZE*DMMBNUM-1,A0
000010D4  6DEC                     294              BLT     DMMFLOOP
000010D6  207C 00000000            295              MOVE.L  #0,A0
000010DC  4E75                     296  DMMFFND     RTS
000010DE                           297  
000010DE                           298  ; -----------------------------------------------------------------------------
000010DE                           299  DMMNEXTO
000010DE                           300  ; SEARCHES THE NEXT MEMORY SLOT WITH THE SPECIFIED ID AND OUTPUTS A POINTER
000010DE                           301  ; TO THE CORRESPONDING DATA (SLOT ADDRESS+2)
000010DE                           302  ; INPUT    - D0.W : ID TO SEARCH
000010DE                           303  ;            A0   : POINTER WITHIN THE CURRENT SLOT
000010DE                           304  ; OUTPUT   - A0   : POINTER TO THE DATA OR 0 IF NOT FOUND
000010DE                           305  ; MODIFIES - NONE (ASIDE OF OUTPUT)
000010DE                           306  ; -----------------------------------------------------------------------------
000010DE  2F00                     307              MOVE.L  D0,-(A7)
000010E0  2008                     308              MOVE.L  A0,D0
000010E2  C0BC FFFFFFC0            309              AND.L   #-DMMBSIZE,D0           ; TAKE ADVANTAGE OF ALIGNMENT
000010E8  0680 00000040            310              ADD.L   #DMMBSIZE,D0
000010EE  2040                     311              MOVE.L  D0,A0
000010F0  201F                     312              MOVE.L  (A7)+,D0
000010F2  60DA                     313              BRA     DMMFCOM
000010F4                           314  
000010F4                           315  ; -----------------------------------------------------------------------------
000010F4                           316  DMMALLOC
000010F4                           317  ; SEARCHES THE FIRST FREE (SYS OWNED) SLOT, ASSIGNS TO THE SPECIFIED OWNER
000010F4                           318  ; AND RETURNS A POINTER TO THE CORRESPONDING DATA (SLOT ADDRESS + 2)
000010F4                           319  ; INPUT    - D0.W : ID TO ASSIGN
000010F4                           320  ; OUTPUT   - A0   : POINTER TO THE DATA OR 0 IF NOT FREE SPACE
000010F4                           321  ; MODIFIES - NONE (ASIDE OF OUTPUT)
000010F4                           322  ; -----------------------------------------------------------------------------
000010F4  3F00                     323              MOVE.W  D0,-(A7)
000010F6  4240                     324              CLR.W   D0
000010F8  4EB8 10BC                325              JSR     DMMFRSTO
000010FC  301F                     326              MOVE.W  (A7)+,D0
000010FE  B1FC 00000000            327              CMP.L   #0,A0
00001104  6700 0006                328              BEQ     .END
00001108  3140 FFFE                329              MOVE.W  D0,-2(A0)
0000110C  4E75                     330  .END        RTS
0000110E                           331  
0000110E                           332  ; -----------------------------------------------------------------------------
0000110E                           333  DMMFREE
0000110E                           334  ; FREES THE SLOT TO WHICH THE PROVIDED POINTER BELONGS BY SETTING ITS OWNED TO
0000110E                           335  ; SYSTEM (0)
0000110E                           336  ; INPUT    - A0   : POINTER BELONGING TO THE SLOT TO FREE
0000110E                           337  ; OUTPUT   - NONE
0000110E                           338  ; MODIFIES - NONE
0000110E                           339  ; -----------------------------------------------------------------------------
0000110E  48E7 8080                340              MOVEM.L D0/A0,-(A7)
00001112  2008                     341              MOVE.L  A0,D0
00001114  C0BC FFFFFFC0            342              AND.L   #-DMMBSIZE,D0           ; TAKE ADVANTAGE OF ALIGNMENT
0000111A  2040                     343              MOVE.L  D0,A0
0000111C  4250                     344              CLR.W   (A0)
0000111E  4CDF 0101                345              MOVEM.L (A7)+,D0/A0
00001122  4E75                     346              RTS
00001124                           347  
00001124                           348  
00001124                           349  
00001124                           350  
00001124                           351  
00001124                           352  
00001124                           353  
00001124                           354  -------------------- end include --------------------
00001124                           355              ; TO DO: PUT YOUR GAME-RELATED INCLUDES HERE
00001124                           356  
00001124                           357  ; --- INITIALIZE --------------------------------------------------------------
00001124                           358  
00001124  4EB8 1000                359  START       JSR     SYSINIT
00001128                           360              ; TO DO: CALL GAME INITIALIZATION CODE HERE
00001128                           361  
00001128                           362  ; --- UPDATE ------------------------------------------------------------------
00001128                           363  
00001128  4E40                     364  .LOOP       TRAP    #KBDTRAP                ; READ KEYBOARD
0000112A                           365              ; TO DO: CALL GAME UPDATE CODE HERE
0000112A                           366  
0000112A                           367  ; --- WAIT SYNCH --------------------------------------------------------------
0000112A                           368  
0000112A  4A39 00001142            369  .WINT       TST.B   (SCRINTCT)              ; WAIT FOR INTERRUPT
00001130  67F8                     370              BEQ     .WINT
00001132  4239 00001142            371              CLR.B   (SCRINTCT)
00001138                           372  
00001138                           373  ; --- PLOT --------------------------------------------------------------------
00001138                           374  
00001138                           375              ; TO DO: CALL GAME PLOT CODE HERE
00001138  4E41                     376              TRAP    #SCRTRAP                ; SHOW GRAPHICS
0000113A  60EC                     377              BRA     .LOOP
0000113C  FFFF FFFF                378              SIMHALT
00001140                           379  
00001140                           380  ; --- VARIABLES ---------------------------------------------------------------
00001140                           381  
00001140                           382              INCLUDE "SYSVAR.X68"
00001140                           383  ; =============================================================================
00001140                           384  ; SYSTEM VARS
00001140                           385  ; NOTE THAT ALL THESE VARS ARE USED TO SHARE DATA FROM SYSTEM TO USER. THUS
00001140                           386  ; THEY MUST NOT BE IN PROTECTED MEMORY.
00001140                           387  ; NOTE THAT USING DMMDATA IN SUCH WAY IS A BAD IDEA, AS USER APPLICATIONS CAN
00001140                           388  ; ALSO FREE OR CHANGE OWNERSHIP. NONETHELESS, FOR THE SAKE OF THIS EXAMPLE
00001140                           389  ; THIS IS GOOD ENOUGH.
00001140                           390  ; =============================================================================
00001140                           391  
00001140                           392  ; --- KEYBOARD RELATED VARIABLES ----------------------------------------------
00001140                           393  
00001140                           394  KBDVAL      DS.B    1                       ; KEY PRESSED=1
00001141                           395  KBDEDGE     DS.B    1                       ; KEY CHANGED=1
00001142                           396  
00001142                           397              DS.W    0
00001142                           398  
00001142                           399  ; --- SCREEN RELATED VARIABLES ------------------------------------------------
00001142                           400  
00001142                           401  SCRINTCT    DS.B    1                       ; INTERRUPT COUNTER/FLAG
00001143                           402  SCRCYCCT    DS.B    1                       ; CYCLE COUNTER
00001144                           403              DS.W    0
00001144                           404  
00001144                           405  ; --- DYNAMIC MEMORY VARIABLES ------------------------------------------------
00001144                           406  
00001180                           407              ORG     (*+DMMBSIZE-1)&-DMMBSIZE ; ALIGN TO DMMBSIZE
00001180                           408  DMMDATA     DS.B    DMMBSIZE*DMMBNUM        ; DYNAMIC MEMORY ALLOCATION SPACE
00001E00                           409              DS.W    0                       ; JUST IN CASE (SIZE IS POW OF TWO)
00001E00                           410  
00001E00                           411  
00001E00                           412  -------------------- end include --------------------
00001E00                           413              INCLUDE "VAR.X68"
00001E00                           414  ; =============================================================================
00001E00                           415  ; GAME VARS
00001E00                           416  ; =============================================================================
00001E00                           417  
00001E00                           418  ; TO DO: DECLARE GAME VARIABLES HERE.
00001E00                           419  -------------------- end include --------------------
00001E00                           420              END    START

24 errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
DMMALLOC            10F4
DMMALLOC:END        110C
DMMBNUM             32
DMMBSIZE            40
DMMDATA             1180
DMMFCOM             10CE
DMMFFND             10DC
DMMFIRST            1084
DMMFLOOP            10C2
DMMFRCOM            1096
DMMFREE             110E
DMMFRFND            10A4
DMMFRLOP            108A
DMMFRSTO            10BC
DMMINIT             1062
DMMINIT:LOOP        1070
DMMNEXT             10A6
DMMNEXTO            10DE
DMMSYSID            0
KBDBITDN            3
KBDBITF1            4
KBDBITF2            5
KBDBITF3            6
KBDBITLF            0
KBDBITPS            7
KBDBITRT            2
KBDBITUP            1
KBDCHRDN            28
KBDCHRLF            25
KBDCHRMK            4D
KBDCHRPK            50
KBDCHRRT            27
KBDCHRSH            10
KBDCHRSP            20
KBDCHRUP            26
KBDDOWN             28
KBDEDGE             1141
KBDFIRE1            20
KBDFIRE2            4D
KBDFIRE3            10
KBDINIT             104A
KBDLEFT             25
KBDMSKDN            8
KBDMSKF1            10
KBDMSKF2            20
KBDMSKF3            40
KBDMSKLF            1
KBDMSKPS            80
KBDMSKRT            4
KBDMSKUP            2
KBDPAUSE            50
KBDREAD             1060
KBDRIGHT            27
KBDTRAP             0
KBDUP               26
KBDVAL              1140
SCRCYCCT            1143
SCRHEIGH            1E0
SCRINIT             101C
SCRINTCT            1142
SCRIRQ              1
SCRISR              103A
SCRTIM              14
SCRTRAP             1
SCRUPD              1048
SCRWIDTH            280
START               1124
START:LOOP          1128
START:WINT          112A
SYSINIT             1000
